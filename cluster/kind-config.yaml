kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
#networking:
#  ipFamily: ipv4
#  disableDefaultCNI: true
# patch the generated kubeadm config with some extra settings
kubeadmConfigPatches:
  - |
    apiVersion: kubelet.config.k8s.io/v1beta1
    kind: KubeletConfiguration
    evictionHard:
      nodefs.available: "0%"
# patch it further using a JSON 6902 patch
kubeadmConfigPatchesJSON6902:
  - group: kubeadm.k8s.io
    version: v1beta2
    kind: ClusterConfiguration
    patch: |
      - op: add
        path: /apiServer/certSANs/-
        value: random-hostname
# 1 control plane node and 2 workers
nodes:
  # the control plane node config
  - role: control-plane
    image: docker.io/kindest/node:v1.20.15@sha256:723256355216daf57d92fb12a209181badb6db635b804372d475d7117d60add2
    kubeadmConfigPatches:
      - |
        kind: InitConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "ingress-ready=true"
    extraPortMappings:
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 443
        hostPort: 443
        protocol: TCP
    # the workers
  - role: worker
    image: docker.io/kindest/node:v1.20.15@sha256:723256355216daf57d92fb12a209181badb6db635b804372d475d7117d60add2
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "database-node=true,worker-node=true"
  - role: worker
    image: docker.io/kindest/node:v1.20.15@sha256:723256355216daf57d92fb12a209181badb6db635b804372d475d7117d60add2
    kubeadmConfigPatches:
      - |
        kind: JoinConfiguration
        nodeRegistration:
          kubeletExtraArgs:
            node-labels: "worker-node=true"
